from flask import Flask, request
from xor import *
from SHA1 import *
from time import sleep
from hashlib import sha256

app = Flask(__name__)

def HMAC_sha1(key, message):

    # 64-byte blocks and 20-byte output for SHA1
    blockSize = 64
    outputSize = 20

    if len(key) > blockSize:
        key = sha1(key)

    elif len(key) < blockSize:
        key += b'\x00' * (blockSize - len(key))

    o_key_pad = xor(key.encode("hex"), ("5c" * blockSize)).decode("hex")
    i_key_pad = xor(key.encode("hex"), ("36" * blockSize)).decode("hex")

    return sha1(o_key_pad + sha1(i_key_pad + message).decode("hex"))[:outputSize*2]

def HMAC_sha256(key, message):

    # 64-byte blocks and 32-byte output for SHA256
    blockSize = 64
    outputSize = 32

    if len(key) > blockSize:
        key = sha256(key).hexdigest()

    elif len(key) < blockSize:
        key += b'\x00' * (blockSize - len(key))

    o_key_pad = xor(key.encode("hex"), ("5c" * blockSize)).decode("hex")
    i_key_pad = xor(key.encode("hex"), ("36" * blockSize)).decode("hex")

    return sha256(o_key_pad + sha256(i_key_pad + message).hexdigest().decode("hex")).hexdigest()[:outputSize*2]


def compareGood(s1, s2):
    return s1 == s2

def compareBad(s1, s2):

    length = len(s1)
    s2 = s2 + "\x00" * (len(s1) - len(s2)) # pad last message for comparison (otherwise exception)

    for i in range(length): #use s1 because it is the one generated by server
        sleep(0.002)
        if s1[i] != s2[i]:
            return 0
    return 1

@app.route('/get', methods=['GET'])
def get():
    file = str(request.args.get('file'))
    return HMAC_sha1("myKeyIsL337", file) + "\n"

@app.route('/retrieve', methods=['GET'])
def check():
    file = str(request.args.get('file'))
    signature = str(request.args.get('signature'))

    hmacGood = HMAC_sha1("myKeyIsL337", file)

    if compareBad(hmacGood, signature):
        return "Signature authenticated!\n", 200
    else:
        return "Message was modified, WARNING!\n", 500

if __name__ == "__main__":
    app.run()
